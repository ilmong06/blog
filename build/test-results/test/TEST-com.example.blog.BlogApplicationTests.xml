<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.example.blog.BlogApplicationTests" tests="1" skipped="0" failures="0" errors="0" timestamp="2024-05-23T07:58:36" hostname="A-09" time="0.595">
  <properties/>
  <testcase name="contextLoads()" classname="com.example.blog.BlogApplicationTests" time="0.595"/>
  <system-out><![CDATA[16:58:32.382 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.example.blog.BlogApplicationTests]: BlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
16:58:32.475 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.blog.BlogApplication for test class com.example.blog.BlogApplicationTests

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.5)

2024-05-23T16:58:32.800+09:00  INFO 1300 --- [    Test worker] com.example.blog.BlogApplicationTests    : Starting BlogApplicationTests using Java 17.0.11 with PID 1300 (started by SBS in C:\sb_blog_2405)
2024-05-23T16:58:32.803+09:00  INFO 1300 --- [    Test worker] com.example.blog.BlogApplicationTests    : The following 2 profiles are active: "secret", "dev"
2024-05-23T16:58:33.386+09:00  INFO 1300 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-05-23T16:58:33.477+09:00  INFO 1300 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 78 ms. Found 1 JPA repository interface.
2024-05-23T16:58:34.097+09:00  INFO 1300 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-05-23T16:58:34.178+09:00  INFO 1300 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-05-23T16:58:34.234+09:00  INFO 1300 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-05-23T16:58:34.575+09:00  INFO 1300 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-05-23T16:58:34.606+09:00  INFO 1300 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-05-23T16:58:34.672+09:00  INFO 1300 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.mariadb.jdbc.Connection@2a120c88
2024-05-23T16:58:34.674+09:00  INFO 1300 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-05-23T16:58:35.466+09:00  INFO 1300 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-05-23T16:58:35.510+09:00  INFO 1300 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-05-23T16:58:35.878+09:00  WARN 1300 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-05-23T16:58:36.222+09:00  INFO 1300 --- [    Test worker] com.example.blog.BlogApplicationTests    : Started BlogApplicationTests in 3.621 seconds (process running for 4.49)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.example.blog.domain.post.entity.Post */insert 
    into
        post (content, create_date, modified_date, title) 
    values
        (?, ?, ?, ?)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
